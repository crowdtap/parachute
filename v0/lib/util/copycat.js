// Generated by CoffeeScript 1.6.2
var fs, glob, mkdirp, ncp, path, q, _;

_ = require('./lodash-ext');

q = require('q');

fs = require('fs');

ncp = require('ncp');

glob = require('glob');

path = require('path');

mkdirp = require('mkdirp');

module.exports.copy = function(src, dest, options) {
  var deferred, destDir, i, srcFile, srcs, tally, _dest, _i, _len, _src;

  deferred = q.defer();
  srcs = glob.sync(src);
  destDir = this.parseDestDir(dest);
  if (options == null) {
    options = {};
  }
  if (srcs.length === 0) {
    throw new Error("no files matching " + src);
  } else if (srcs.length > 1 && !this.isDirectoryPath(dest)) {
    throw new Error("" + dest + " is not a directory");
  }
  if (!fs.existsSync(destDir)) {
    mkdirp.sync(destDir);
  }
  tally = 0;
  for (i = _i = 0, _len = srcs.length; _i < _len; i = ++_i) {
    _src = srcs[i];
    srcFile = this.parseFilename(_src);
    _dest = this.isDirectoryPath(dest) && path.join(destDir, srcFile) || dest;
    ncp(_src, _dest, options, function(err) {
      if (err) {
        throw err;
      }
      if (++tally === srcs.length) {
        return deferred.resolve();
      }
    });
  }
  return deferred.promise;
};

module.exports.isDirectoryPath = function(pathString) {
  return _.endsWith(pathString, '/') || fs.existsSync(pathString) && fs.statSync(pathString).isDirectory();
};

module.exports.parseDestDir = function(pathString) {
  if (this.isDirectoryPath(pathString)) {
    return pathString;
  } else {
    return pathString.split('/').slice(0, -1).join('/') + '/';
  }
};

module.exports.parseFilename = function(pathString) {
  if (this.isDirectoryPath(pathString)) {
    return '';
  } else {
    return _.last(pathString.split('/'));
  }
};
