// Generated by CoffeeScript 1.6.2
var copycat, expect, fs, rimraf;

copycat = require('../lib/util/copycat');

fs = require('fs');

expect = require('expect.js');

rimraf = require('rimraf');

describe('copycat', function() {
  var clean, cwd, testDir;

  cwd = process.cwd();
  testDir = "" + __dirname + "/install_test";
  clean = function(done) {
    return rimraf(testDir, function(err) {
      if (err) {
        throw new Error('Unable to remove install directory');
      }
      return typeof done === "function" ? done() : void 0;
    });
  };
  beforeEach(function(done) {
    process.chdir(cwd);
    return clean(function() {
      return fs.mkdir(testDir, function(err) {
        if (err) {
          throw err;
        }
        process.chdir(testDir);
        return typeof done === "function" ? done() : void 0;
      });
    });
  });
  after(function(done) {
    process.chdir(cwd);
    return clean(done);
  });
  describe('#copy', function() {
    it('throws an error if copying a glob path into a single file', function(done) {
      var e;

      fs.writeFileSync('bar.txt', '');
      fs.writeFileSync('baz.txt', '');
      try {
        return copycat.copy('*.txt', 'foo/what.txt');
      } catch (_error) {
        e = _error;
        expect(e.message).to.eql('foo/what.txt is not a directory');
        return done();
      }
    });
    it('throws an error if copying a file that does not exist', function(done) {
      var e;

      try {
        return copycat.copy('nonexistent.txt', 'foo/what.txt');
      } catch (_error) {
        e = _error;
        expect(e.message).to.eql('no files matching nonexistent.txt');
        return done();
      }
    });
    it('returns a promise', function(done) {
      fs.writeFileSync('foo.txt', '');
      expect(copycat.copy('foo.txt', 'bar.txt').toString()).to.be('[object Promise]');
      return done();
    });
    it('can copy a single file path to a single file path', function(done) {
      fs.writeFileSync('foo.txt', '');
      return copycat.copy('foo.txt', 'bar.txt').then(function() {
        expect(fs.existsSync('bar.txt')).to.be(true);
        return done();
      });
    });
    it('can copy a single file path to a directory path', function(done) {
      fs.writeFileSync('foo.txt', '');
      fs.mkdirSync('some_dir');
      return copycat.copy('foo.txt', 'some_dir/').then(function() {
        expect(fs.existsSync('some_dir/foo.txt')).to.be(true);
        return done();
      });
    });
    it('can copy a glob file path to a directory path', function(done) {
      fs.writeFileSync('foo.txt', '');
      fs.writeFileSync('bar.txt', '');
      fs.writeFileSync('baz.js', '');
      fs.mkdirSync('some_dir');
      return copycat.copy('*.txt', 'some_dir/').then(function() {
        expect(fs.existsSync('some_dir/foo.txt')).to.be(true);
        expect(fs.existsSync('some_dir/bar.txt')).to.be(true);
        expect(fs.existsSync('some_dir/baz.js')).to.be(false);
        return done();
      });
    });
    return it('can copy a directory path to a directory path recursively', function(done) {
      fs.mkdirSync('src_dir');
      fs.mkdirSync('dest_dir');
      fs.writeFileSync('src_dir/foo.txt', '');
      fs.writeFileSync('src_dir/bar.txt', '');
      return copycat.copy('src_dir/', 'dest_dir/').then(function() {
        expect(fs.existsSync('dest_dir/foo.txt')).to.be(true);
        expect(fs.existsSync('dest_dir/bar.txt')).to.be(true);
        return done();
      });
    });
  });
  describe('#isDirectoryPath', function() {
    return it('determines if the path appears to be a directory path', function(done) {
      expect(copycat.isDirectoryPath('foo')).to.be(false);
      expect(copycat.isDirectoryPath('foo/')).to.be(true);
      return done();
    });
  });
  describe('#parseDestDir', function() {
    return it('derives the destination directory from the path', function(done) {
      expect(copycat.parseDestDir('foo/bar/')).to.be('foo/bar/');
      expect(copycat.parseDestDir('foo/bar/baz.txt')).to.be('foo/bar/');
      return done();
    });
  });
  return describe('#parseFilename', function() {
    it('derives the destination directory from the path', function(done) {
      expect(copycat.parseFilename('foo/bar/baz.txt')).to.be('baz.txt');
      return done();
    });
    return it('returns an empty string if path is a directory', function(done) {
      expect(copycat.parseFilename('foo/bar/')).to.eql('');
      return done();
    });
  });
});
