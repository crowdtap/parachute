// Generated by CoffeeScript 1.6.2
var expect, fs, gitWrapper, q, rewire, sinon;

rewire = require('rewire');

gitWrapper = rewire('../lib/util/git-wrapper');

q = require('q');

fs = require('fs');

expect = require('expect.js');

sinon = require('sinon');

describe('git-wrapper', function() {
  describe('git process', function() {
    beforeEach(function(done) {
      this.spawnStub = sinon.stub({
        spawn: function() {}
      }, 'spawn', function(cmd, args, opts) {
        return {
          cmd: cmd,
          on: function() {},
          stderr: {
            on: function() {}
          }
        };
      });
      gitWrapper.__set__({
        spawn: this.spawnStub
      });
      return done();
    });
    it('spawns a git process with arguments', function(done) {
      var gitArgs;

      gitArgs = ['clone', 'foo', 'bar'];
      gitWrapper(gitArgs);
      expect(this.spawnStub.calledWith('git', gitArgs)).to.be(true);
      return done();
    });
    it('spawns a git process with arguments', function(done) {
      var gitArgs, gitOptions;

      gitArgs = ['clone', 'foo', 'bar'];
      gitOptions = {
        cwd: 'some/directory'
      };
      gitWrapper(gitArgs, gitOptions);
      expect(this.spawnStub.calledWith('git', gitArgs, gitOptions)).to.be(true);
      return done();
    });
    it('defaults options cwd to process.cwd', function(done) {
      var gitArgs;

      gitArgs = ['clone', 'foo', 'bar'];
      gitWrapper(gitArgs);
      expect(this.spawnStub.calledWith('git', gitArgs, {
        cwd: process.cwd()
      })).to.be(true);
      return done();
    });
    it('returns a promise', function(done) {
      var gitArgs;

      gitArgs = ['clone', 'foo', 'bar'];
      expect(gitWrapper(gitArgs).toString()).to.be('[object Promise]');
      return done();
    });
    return it('resolves the promise with the exit code', function(done) {
      this.spawnStub = sinon.stub({
        spawn: function() {}
      }, 'spawn', function(cmd, args, opts) {
        return {
          on: function(event, callback) {
            return typeof callback === "function" ? callback(1) : void 0;
          },
          stderr: {
            on: function() {}
          }
        };
      });
      gitWrapper.__set__({
        spawn: this.spawnStub
      });
      return gitWrapper(['clone', 'foo', 'bar']).then(function(code) {
        expect(code).to.be(1);
        return done();
      });
    });
  });
  describe('output', function() {
    beforeEach(function(done) {
      gitWrapper.__set__({
        console: {
          log: function(msg) {
            return msg;
          }
        }
      });
      return done();
    });
    it('displays stderr output if verbose option passed', function(done) {
      this.spawnStub = sinon.stub({
        spawn: function() {}
      }, 'spawn', function(cmd, args, opts) {
        return {
          on: function() {},
          stderr: {
            on: function(event, callback) {
              expect(event).to.eql('data');
              expect(typeof callback === "function" ? callback('someErrorMsg') : void 0).to.eql("\nsomeErrorMsg");
              return done();
            }
          }
        };
      });
      gitWrapper.__set__({
        spawn: this.spawnStub
      });
      return gitWrapper(['clone', 'foo', 'bar'], {
        verbose: true
      });
    });
    return it('does not display stderr output by default', function(done) {
      var stdErrOnStub;

      stdErrOnStub = sinon.stub();
      this.spawnStub = sinon.stub({
        spawn: function() {}
      }, 'spawn', function(cmd, args, opts) {
        return {
          on: function() {},
          stderr: {
            on: stdErrOnStub
          }
        };
      });
      gitWrapper.__set__({
        spawn: this.spawnStub
      });
      gitWrapper(['clone', 'foo', 'bar']);
      expect(stdErrOnStub.called).to.be(false);
      return done();
    });
  });
  return describe('git exit code 128', function() {
    it('logs an error message', function(done) {
      this.spawnStub = sinon.stub({
        spawn: function() {}
      }, 'spawn', function(cmd, args, opts) {
        return {
          on: function(event, callback) {
            expect(event).to.eql('exit');
            expect(typeof callback === "function" ? callback(128) : void 0).to.eql("git did not exit cleanly!");
            return done();
          },
          stderr: {
            on: function() {}
          }
        };
      });
      gitWrapper.__set__({
        spawn: this.spawnStub
      });
      return gitWrapper(['clone', 'foo', 'bar']);
    });
    return it('resolves the promise as rejected with an error message', function(done) {
      this.spawnStub = sinon.stub({
        spawn: function() {}
      }, 'spawn', function(cmd, args, opts) {
        return {
          on: function(event, callback) {
            return typeof callback === "function" ? callback(128) : void 0;
          },
          stderr: {
            on: function() {}
          }
        };
      });
      gitWrapper.__set__({
        spawn: this.spawnStub
      });
      return gitWrapper(['clone', 'foo', 'bar']).fail(function(err) {
        expect(err).to.be('git did not exit cleanly!');
        return done();
      });
    });
  });
});
